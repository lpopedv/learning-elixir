# Estruturas de controle

## If e unless

Em Elixir, if e unless funcionam de forma semelhante às construções condicionais de outras linguagens, mas com algumas características próprias:

* <b>Definidos como macros:</b> if e unless não são construções nativas da linguagem, mas macros que fazem parte do módulo Kernel. Isso significa que eles são extensíveis e podem ser sobrescritos, caso necessário.

* <b>Valores considerados falsos:</b> Em Elixir, apenas `false` e `nil` são avaliados como falsos em contextos condicionais. Qualquer outro valor é tratado como verdadeiro.

* <b>Uso de if:</b> Avalia a condição fornecida e executa o bloco de código associado ao do quando a condição é verdadeira. Opcionalmente, pode incluir um bloco else para lidar com o caso em que a condição é falsa.

* <b>Uso de unless:</b> É o inverso de if. Executa o bloco de código associado ao do quando a condição é falsa. Assim como o if, pode incluir um bloco else para tratar o caso contrário.

<!-- livebook:{"break_markdown":true} -->

#### if

```elixir
if String.valid?("Hello World!") do
  "Valid String!"
else
  "Invalid String!"
end
```

```elixir
if "a string value" do
  "Truthy"
end
```

#### unless

<!-- livebook:{"break_markdown":true} -->

O uso de unless é bem parecido com o uso de if, porém trabalhando de forma negativa

```elixir
unless is_integer("hello") do
  "not an int"
end
```

## Case

O case em Elixir avalia uma expressão e tenta casar seu valor com os padrões definidos. Se nenhum padrão for atendido, ocorre um CaseClauseError. Podemos evitar o erro tratando todos os outros casos com a variável `_`.

```elixir
case {:ok, "Hello World"} do
  {:ok, result} -> result
  {:error} -> "Some error"
  _ -> "Catch all"
end
```

Dentro do case podemos utilizar os guards:

```elixir
case {1, 2, 3} do
  {1, x, 3} when x > 0 ->
    "match"
  _ -> "Won't match"
end
```

## Cond

Quando precisarmos associar condições e não valores, podemos utilizar o `cond/1`. Ele é semelhante ao `else if` ou `elsif` de outras linguagens

```elixir
cond do
  2 + 2 == 5 ->
    "This will not be true"
  2 * 2 == 3 ->
    "Nor this"
  1 + 1 == 2 ->
    "But this will"
end
```

Assim como o `case/2`, o `cond/1` irá gerar um erro caso não encontre uma associação. Para lidar com isso, podemos definiar a condição para `true`.

```elixir
cond do
  7 + 1 == 0 -> "Incorrect"
  true -> "Catch all"
end
```

## With

O `with/1` em Elixir é uma construção que simplifica o fluxo de controle em casos onde múltiplas operações precisam ser encadeadas e verificadas. Ele é útil para evitar blocos `case` aninhados. O `with` avalia expressões sequencialmente e, se todas tiverem sucesso (retornarem o padrão esperado), a última expressão é retornada. Caso uma delas falhe, o fluxo é interrompido e o valor não correspondido é retornado.

```elixir
with {:ok, num} <- {:ok, 42},
     {:ok, doubled} <- {:ok, num * 2} do
  {:success, doubled}
else
  error -> error
end

```
