# Módulos

## Módulos

Os módulos em Elixir permitem a organização de funções em um mesmo namespace. Além de agrupar funções, eles permitem definir `funções nomeadas` e `funções privadas`.

```elixir
defmodule Example do
  def greeting(name) do
    "Hello #{name}"
  end
end
```

```elixir
Example.greeting("Jon")
```

É possível aninhar módulos em Elixir, o que permite promover um namespace para a funcionalidade:

```elixir
defmodule Example.Greetings do
  def morning(name), do: "Good morning #{name}"
  def evening(name), do: "Good night #{name}"
end
```

```elixir
Example.Greetings.morning("Doa")
```

## Atributos de um módulo

`Atributos` de módulo são mais comumente usados como `constantes` em Elixir:

```elixir
defmodule AttributesExample do
  @greeting "Hello"

  def greeting(name), do: "#{@greeting} #{name}"
end
```

Vale lembrar que existem atributos reservados no Elixir. Os três mais comuns são:

* <b> moduledoc</b>: Documenta o módulo atual
* <b>doc</b>: Documentação para funções e macros
* <b>behaviour</b>: Usa um OTP ou comportamento definido

## Structs

`Structs` basicamente são `mapas com nomes`. Uma `struct` deve ser definida dentro de um módulo que leva o mesmo nome dele. É comum para uma struct ser a única coisa definida dentro de um módulo.

```elixir
defmodule Example.User do
  defstruct name: "Sean", roles: []
end
```

```elixir
%Example.User{}
```

```elixir
steve = %Example.User{name: "Steve", roles: [:manager]}
```

Também é possível `proteger` campos e não exibi-los em um inspect através da funcionalidade de @derive.

```elixir
defmodule ExampleDerive.User do
  @derive {Inspect, only: [:name]}
  defstruct name: nil, roles: []
end
```

```elixir
sean = %ExampleDerive.User{name: "Sean", roles: [:admin]}
```

```elixir
inspect(sean)
```

## Composição

Utilizar composição nos nossos módulos nos permite incluir uma funcionalidade já existente dentro de um módulo.

<!-- livebook:{"break_markdown":true} -->

#### alias

`Alias` é uma forma de criar uma espécie de "atalho" para um módulo, permitindo que você use um nome mais curto ao invés de referenciar o módulo completo.

```elixir
defmodule Sayings.Greetings do
  def basic(name), do: "Hi, #{name}"
end

defmodule AliasExample do
  alias Sayings.Greetings # O alias se torna a última palavra do módulo

  def greeting(name), do: Greetings.basic(name) # Utilizando alias
end

defmodule NoAliasExample do
  def greeting(name), do: Sayings.Greetings.basic(name) # Sem utilizar alias
end
```

Caso haja conflito com dois aliases ou você deseja criar um alias personalizado, podemos utilizar a opção `:as`:

```elixir
defmodule ExampleCustomAliase do
  alias Sayings.Greetings, as: Hi

  def print_message(name), do: Hi.basic(name)
end
```

#### import

Também é possível importar funções ao invés de criar aliases.

```elixir
last([1, 2, 3])
```

```elixir
import List
last([1, 2, 3])
```

#### filtros

por padrão todas as funções são importadas. Utilizando filtros nós podemos importar apenas as funções que vamos utilizar. Podemos filtrar utilizando as opções `:only` e `:except`.

```elixir
import List, only: [last: 1] # importanto apenas a função last de aridade 1
```

```elixir
last([1, 2, 3])
```

Além do par nome/aridade existem dois átomos especiais, `:functions` e `macros`, que importam apenas funções e macros, respectivamente:

```elixir
import List, only: :functions
import List, only: :macros
```

#### require

Nós podemos usar `require` para dizer ao Elixir que vamos usar macros de um outro módulo. A diferença de require para `import` é que o `require` permite usar somente macros, funções não são importadas.

```elixir
defmodule Example do
  require SuperMacros

  SuperMacros.do_stuff
end
```

#### use

A macro `use` facilita a inclusão de funcionalidades e comportamentos em módulos. Ao utilizar `use` você ativa a macro `__using__/1` do módulo que está sendo utilizado. Essa macro pode injetar código ou realizar configurações no módulo que o implementa.

<!-- livebook:{"break_markdown":true} -->

* <b>Definição do</b> `__using__/1`: O módulo que será usado precisa definir a macro especial `__using__/1`.
  Essa macro deve retornar um `quoted expression`, que nada mais é do que um <b>bloco de código</b> que será <b>incluído</b> no módulo que está <b>utilizando</b> o `use`.
* <b>Execução do `use`</b>: Quando um módulo utiliza `use AnotherModule`, o compilador executa a macro `__using__/1` de `AnotherModule` e injeta o código gerado diretamente no módulo que chamou o `use`.

```elixir
# Módulo que será utilizado por outros com `use`
defmodule LearnElixir.AnotherModule do
  defmacro __using__(opts) do # Define o que será adicionado no módulo que usar use 
    quote do # Qualquer coisa dentro de quote será literalmente inserida no módulo.
      def hello() do
        IO.puts "Hello World!"
      end

      # Injeta um atributo de módulo, usando as opções passadas por `use`
      @opts unquote(opts) 
    end
  end
end
```

```elixir
alias LearnElixir.AnotherModule # Cria um alias para facilitar o uso

# Módulo que utiliza `LearnElixir.AnotherModule` com `use`
defmodule LearnElixir.UseExample do
  # Chama a macro `__using__/1` do módulo `LearnElixir.AnotherModule`
  use AnotherModule, option_to_pass: :option_value, another_option: :another_option_value  # As opções são passadas para o "opts" da macro
end
```

```elixir
alias LearnElixir.UseExample

UseExample.hello()
```
